require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe CoursesController do

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # CoursesController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  let!(:course1) do
    c = Course.new
    c.title = 'english'
    c.number = '1000H'
    c.send(:avg_gpa=, 4)
    c.save!
    c
  end

  let!(:course2) do
    c = Course.new
    c.title = 'math'
    c.number = '200H'
    c.send(:avg_gpa=, 1)
    c.save!
    c
  end

  let!(:course3) do
    c = Course.new
    c.title = 'history'
    c.number = '3000'
    c.send(:avg_gpa=, 3)
    c.save!
    c
  end
 
 

  describe "GET index" do

    describe 'pagination' do

      before(:each) do
        Course.stub(:per_page).and_return 2
      end

      it 'paginates courses as @courses' do
        get :index
        assigns(:courses).should eq([course1, course3])
      end

      it 'paginates the second page' do
        get :index, :page => 2
        assigns(:courses).should eq([course2])
      end

    end

  end

  describe "GET show" do
    it "assigns the requested course as @course" do
      get :show, {:id => course1.to_param}, valid_session
      assigns(:course).should eq(course1)
    end
  end

end
